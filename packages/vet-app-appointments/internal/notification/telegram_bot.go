package notification

import (
	"fmt"
	"vet-app-appointments/internal/models"
	"vet-app-appointments/internal/service"
	"vet-app-appointments/pkg/logger"
	"github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"strconv"
	"strings"
	"time"
)

type TelegramBot struct {
	bot        *tgbotapi.BotAPI
	service    *service.AppointmentService
	log        *logger.Logger
	userStates map[int64]*BookingState
}

type BookingState struct {
	Step     int
	ClientID uint
	DoctorID uint
	ClinicID uint
	SlotID   uint
}

func NewTelegramBot(token string, service *service.AppointmentService) (*TelegramBot, error) {
	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Telegram –±–æ—Ç–∞: %v", err)
	}
	return &TelegramBot{
		bot:        bot,
		service:    service,
		log:        logger.NewLogger(),
		userStates: make(map[int64]*BookingState),
	}, nil
}

// –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è MarkdownV2
func escapeMarkdownV2(text string) string {
	specialChars := []string{"_", "*", "[", "]", "(", ")", "~", "`", ">", "#", "+", "-", "=", "|", "{", "}", ".", "!"}
	for _, char := range specialChars {
		text = strings.ReplaceAll(text, char, "\\"+char)
	}
	return text
}

func (t *TelegramBot) Start() {
	t.log.Info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := t.bot.GetUpdatesChan(u)

	for update := range updates {
		if update.CallbackQuery != nil {
			t.handleCallbackQuery(update.CallbackQuery)
			continue
		}

		if update.Message == nil {
			continue
		}

		chatID := update.Message.Chat.ID
		msg := tgbotapi.NewMessage(chatID, "")
		msg.ParseMode = "MarkdownV2"

		if state, exists := t.userStates[chatID]; exists {
			t.handleBookingSteps(chatID, update.Message.Text, state)
			continue
		}

		if update.Message.IsCommand() {
			command := update.Message.Command()
			args := update.Message.CommandArguments()

			switch command {
			case "start":
				msg.Text = "üêæ *–ü—Ä–∏–≤–µ—Ç\\!* –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä—É\\! üéâ\n\n" +
					"–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n" +
					"üìÖ *–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã*: `/slots <id_–∫–ª–∏–Ω–∏–∫–∏> <–¥–∞—Ç–∞>`\n" +
					"   –ü—Ä–∏–º–µ—Ä: `/slots 1 2025\\-05\\-02`\n" +
					"üìã *–£–∑–Ω–∞—Ç—å –æ –∑–∞–ø–∏—Å–∏*: `/appointment <id_–∑–∞–ø–∏—Å–∏>`\n" +
					"   –ü—Ä–∏–º–µ—Ä: `/appointment 1`\n" +
					"‚úçÔ∏è *–°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å*: `/book <id_–∫–ª–∏–µ–Ω—Ç–∞> <id_–¥–æ–∫—Ç–æ—Ä–∞> <id_–∫–ª–∏–Ω–∏–∫–∏> <id_—Å–ª–æ—Ç–∞>`\n" +
					"   –ü—Ä–∏–º–µ—Ä: `/book 1 1 1 1`\n" +
					"üö´ *–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å*: `/cancel <id_–∑–∞–ø–∏—Å–∏>`\n" +
					"   –ü—Ä–∏–º–µ—Ä: `/cancel 1`\n\n" +
					"–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –µ—ë –≤—Ä—É—á–Ω—É—é\\! üòä"
				msg.ReplyMarkup = createMainMenu()
			case "slots":
				t.handleSlotsCommand(chatID, args)
				continue
			case "appointment":
				t.handleAppointmentCommand(chatID, args)
				continue
			case "book":
				t.handleBookCommand(chatID, args)
				continue
			case "cancel":
				t.handleCancelCommand(chatID, args)
				continue
			default:
				msg.Text = "ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞\\. –ù–∞–ø–∏—à–∏ `/start`, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\\!"
			}
		} else {
			switch update.Message.Text {
			case "üìÖ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–æ—Ç—ã":
				msg.Text = "üìÖ –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `/slots <id_–∫–ª–∏–Ω–∏–∫–∏> <–¥–∞—Ç–∞>`\n–ü—Ä–∏–º–µ—Ä: `/slots 1 2025\\-05\\-02`"
			case "üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏":
				msg.Text = "üìã –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `/appointment <id_–∑–∞–ø–∏—Å–∏>`\n–ü—Ä–∏–º–µ—Ä: `/appointment 1`"
			case "‚úçÔ∏è –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å":
				t.userStates[chatID] = &BookingState{Step: 1}
				msg.Text = "‚úçÔ∏è –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –∑–∞–ø–∏—Å—å\\! –®–∞–≥ 1: –í–≤–µ–¥–∏ ID –∫–ª–∏–µ–Ω—Ç–∞ \\(–Ω–∞–ø—Ä–∏–º–µ—Ä, 1\\)"
			case "üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å":
				msg.Text = "üö´ –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `/cancel <id_–∑–∞–ø–∏—Å–∏>`\n–ü—Ä–∏–º–µ—Ä: `/cancel 1`"
			default:
				msg.Text = "ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é\\. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ `/start` –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥\\!"
				msg.ReplyMarkup = createMainMenu()
			}
		}

		if _, err := t.bot.Send(msg); err != nil {
			t.log.Errorf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		}
	}
}

func (t *TelegramBot) handleBookingSteps(chatID int64, input string, state *BookingState) {
	msg := tgbotapi.NewMessage(chatID, "")
	msg.ParseMode = "MarkdownV2"

	switch state.Step {
	case 1:
		clientID, err := strconv.Atoi(input)
		if err != nil {
			msg.Text = "‚ùå –û—à–∏–±–∫–∞: ID –∫–ª–∏–µ–Ω—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º\\. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞\\!"
		} else {
			state.ClientID = uint(clientID)
			state.Step = 2
			msg.Text = "‚úçÔ∏è –®–∞–≥ 2: –í–≤–µ–¥–∏ ID –¥–æ–∫—Ç–æ—Ä–∞ \\(–Ω–∞–ø—Ä–∏–º–µ—Ä, 1\\)"
		}
	case 2:
		doctorID, err := strconv.Atoi(input)
		if err != nil {
			msg.Text = "‚ùå –û—à–∏–±–∫–∞: ID –¥–æ–∫—Ç–æ—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º\\. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞\\!"
		} else {
			state.DoctorID = uint(doctorID)
			state.Step = 3
			msg.Text = "‚úçÔ∏è –®–∞–≥ 3: –í–≤–µ–¥–∏ ID –∫–ª–∏–Ω–∏–∫–∏ \\(–Ω–∞–ø—Ä–∏–º–µ—Ä, 1\\)"
		}
	case 3:
		clinicID, err := strconv.Atoi(input)
		if err != nil {
			msg.Text = "‚ùå –û—à–∏–±–∫–∞: ID –∫–ª–∏–Ω–∏–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º\\. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞\\!"
		} else {
			state.ClinicID = uint(clinicID)
			state.Step = 4
			msg.Text = "‚úçÔ∏è –®–∞–≥ 4: –í–≤–µ–¥–∏ ID —Å–ª–æ—Ç–∞ \\(–Ω–∞–ø—Ä–∏–º–µ—Ä, 1\\)"
		}
	case 4:
		slotID, err := strconv.Atoi(input)
		if err != nil {
			msg.Text = "‚ùå –û—à–∏–±–∫–∞: ID —Å–ª–æ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º\\. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞\\!"
		} else {
			state.SlotID = uint(slotID)
			appointment := &models.Appointment{
				ClientID:   state.ClientID,
				DoctorID:   state.DoctorID,
				ClinicID:   state.ClinicID,
				SlotID:     state.SlotID,
				TelegramID: strconv.FormatInt(chatID, 10),
			}

			if err := t.service.CreateAppointment(appointment); err != nil {
				msg.Text = sensibleError(fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏: %v", err))
			} else {
				msg.Text = fmt.Sprintf("üéâ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞\\! ID: %d", appointment.ID)
			}
			delete(t.userStates, chatID)
			msg.ReplyMarkup = createMainMenu()
		}
	}

	if _, err := t.bot.Send(msg); err != nil {
		t.log.Errorf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

func createMainMenu() tgbotapi.ReplyKeyboardMarkup {
	return tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üìÖ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–æ—Ç—ã"),
			tgbotapi.NewKeyboardButton("üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚úçÔ∏è –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å"),
			tgbotapi.NewKeyboardButton("üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å"),
		),
	)
}

func (t *TelegramBot) handleSlotsCommand(chatID int64, args string) {
	parts := strings.Fields(args)
	if len(parts) != 2 {
		t.sendMessage(chatID, "üìÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/slots <id_–∫–ª–∏–Ω–∏–∫–∏> <–¥–∞—Ç–∞>`\n–ü—Ä–∏–º–µ—Ä: `/slots 1 2025\\-05\\-02`")
		return
	}

	clinicID, err := strconv.Atoi(parts[0])
	if err != nil {
		t.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞: id_–∫–ª–∏–Ω–∏–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
		return
	}

	date, err := time.Parse("2006-01-02", parts[1])
	if err != nil {
		t.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞: –¥–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î \\(–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025\\-05\\-02\\)")
		return
	}

	slots, err := t.service.GetAvailableSlots(uint(clinicID), date)
	if err != nil {
		t.sendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤: %v", err))
		return
	}

	if len(slots) == 0 {
		t.sendMessage(chatID, "üòî –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–µ—Ç\\.")
		return
	}

	var response strings.Builder
	response.WriteString("*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã:*\n")

	var keyboardRows [][]tgbotapi.InlineKeyboardButton
	for _, slot := range slots {
		slotInfo := fmt.Sprintf("ID: %d, –í—Ä–µ–º—è: %s", slot.ID, slot.SlotTime.Format("2006-01-02 15:04"))
		response.WriteString(escapeMarkdownV2(slotInfo) + "\n")

		callbackData := fmt.Sprintf("book_slot:%d:%d", clinicID, slot.ID)
		button := tgbotapi.NewInlineKeyboardButtonData(slotInfo, callbackData)
		keyboardRows = append(keyboardRows, tgbotapi.NewInlineKeyboardRow(button))
	}

	msg := tgbotapi.NewMessage(chatID, response.String())
	msg.ParseMode = "MarkdownV2"
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(keyboardRows...)
	if _, err := t.bot.Send(msg); err != nil {
		t.log.Errorf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

func (t *TelegramBot) handleCallbackQuery(callback *tgbotapi.CallbackQuery) {
	chatID := callback.Message.Chat.ID
	data := strings.Split(callback.Data, ":")

	if len(data) != 3 || data[0] != "book_slot" {
		t.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
		return
	}

	clinicID, err := strconv.Atoi(data[1])
	if err != nil {
		t.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞: clinic_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
		return
	}

	slotID, err := strconv.Atoi(data[2])
	if err != nil {
		t.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞: slot_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
		return
	}

	appointment := &models.Appointment{
		ClientID:   1,
		DoctorID:   1,
		ClinicID:   uint(clinicID),
		SlotID:     uint(slotID),
		TelegramID: strconv.FormatInt(chatID, 10),
	}

	if err := t.service.CreateAppointment(appointment); err != nil {
		t.sendMessage(chatID, sensibleError(fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏: %v", err)))
		return
	}

	t.sendMessage(chatID, fmt.Sprintf("üéâ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞\\! ID: %d", appointment.ID))

	callbackConfig := tgbotapi.NewCallback(callback.ID, "")
	if _, err := t.bot.Request(callbackConfig); err != nil {
		t.log.Errorf("–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è callback: %v", err)
	}
}

func (t *TelegramBot) handleAppointmentCommand(chatID int64, args string) {
	appointmentID, err := strconv.Atoi(args)
	if err != nil {
		t.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞: ID –∑–∞–ø–∏—Å–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
		return
	}

	appointment, err := t.service.GetAppointment(uint(appointmentID))
	if err != nil {
		t.sendMessage(chatID, sensibleError(fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: %v", err)))
		return
	}

	if appointment.TelegramID != strconv.FormatInt(chatID, 10) {
		t.sendMessage(chatID, "üîí –û—à–∏–±–∫–∞: —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏")
		return
	}

	response := fmt.Sprintf("*–ó–∞–ø–∏—Å—å #%d:*\nüë§ –ö–ª–∏–µ–Ω—Ç: %d\nüë®‚Äç‚öïÔ∏è –î–æ–∫—Ç–æ—Ä: %d\nüè• –ö–ª–∏–Ω–∏–∫–∞: %d\n‚è∞ –°–ª–æ—Ç: %d \\(%s\\)\nüìå –°—Ç–∞—Ç—É—Å: %s",
		appointment.ID, appointment.ClientID, appointment.DoctorID, appointment.ClinicID,
		appointment.SlotID, escapeMarkdownV2(appointment.Slot.SlotTime.Format("2006-01-02 15:04")), escapeMarkdownV2(appointment.Status))
	t.sendMessageWithMarkdown(chatID, response)
}

func (t *TelegramBot) handleBookCommand(chatID int64, args string) {
	parts := strings.Fields(args)
	if len(parts) != 4 {
		t.sendMessage(chatID, "‚úçÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/book <id_–∫–ª–∏–µ–Ω—Ç–∞> <id_–¥–æ–∫—Ç–æ—Ä–∞> <id_–∫–ª–∏–Ω–∏–∫–∏> <id_—Å–ª–æ—Ç–∞>`\n–ü—Ä–∏–º–µ—Ä: `/book 1 1 1 1`")
		return
	}

	clientID, err := strconv.Atoi(parts[0])
	if err != nil {
		t.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞: id_–∫–ª–∏–µ–Ω—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
		return
	}
	doctorID, err := strconv.Atoi(parts[1])
	if err != nil {
		t.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞: id_–¥–æ–∫—Ç–æ—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
		return
	}
	clinicID, err := strconv.Atoi(parts[2])
	if err != nil {
		t.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞: id_–∫–ª–∏–Ω–∏–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
		return
	}
	slotID, err := strconv.Atoi(parts[3])
	if err != nil {
		t.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞: id_—Å–ª–æ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
		return
	}

	appointment := &models.Appointment{
		ClientID:   uint(clientID),
		DoctorID:   uint(doctorID),
		ClinicID:   uint(clinicID),
		SlotID:     uint(slotID),
		TelegramID: strconv.FormatInt(chatID, 10),
	}

	if err := t.service.CreateAppointment(appointment); err != nil {
		t.sendMessage(chatID, sensibleError(fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏: %v", err)))
		return
	}

	t.sendMessage(chatID, fmt.Sprintf("üéâ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞\\! ID: %d", appointment.ID))
}

func (t *TelegramBot) handleCancelCommand(chatID int64, args string) {
	appointmentID, err := strconv.Atoi(args)
	if err != nil {
		t.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞: ID –∑–∞–ø–∏—Å–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
		return
	}

	appointment, err := t.service.GetAppointment(uint(appointmentID))
	if err != nil {
		t.sendMessage(chatID, sensibleError(fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: %v", err)))
		return
	}

	if appointment.TelegramID != strconv.FormatInt(chatID, 10) {
		t.sendMessage(chatID, "üîí –û—à–∏–±–∫–∞: —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏")
		return
	}

	appointment.Status = "cancelled"
	if err := t.service.UpdateAppointment(appointment); err != nil {
		t.sendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏: %v", err))
		return
	}

	if err := t.service.UnbookSlot(appointment.SlotID); err != nil {
		t.sendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Å–ª–æ—Ç–∞: %v", err))
		return
	}

	t.sendMessage(chatID, fmt.Sprintf("‚úÖ –ó–∞–ø–∏—Å—å #%d —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞", appointment.ID))
}

func (t *TelegramBot) sendMessage(chatID int64, message string) {
	msg := tgbotapi.NewMessage(chatID, message)
	if _, err := t.bot.Send(msg); err != nil {
		t.log.Errorf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

func (t *TelegramBot) sendMessageWithMarkdown(chatID int64, message string) {
	msg := tgbotapi.NewMessage(chatID, message)
	msg.ParseMode = "MarkdownV2"
	if _, err := t.bot.Send(msg); err != nil {
		t.log.Errorf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

func (t *TelegramBot) SendReminder(chatID string, message string) error {
	id, err := chatIDToInt64(chatID)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è chatID: %v", err)
	}
	t.sendMessage(id, message)
	return nil
}

func chatIDToInt64(chatID string) (int64, error) {
	id, err := strconv.ParseInt(chatID, 10, 64)
	if err != nil {
		return 0, fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chatID: %v", err)
	}
	return id, nil
}

func sensibleError(err string) string {
	if strings.Contains(err, "record not found") {
		return "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
	}
	return escapeMarkdownV2(err)
}
